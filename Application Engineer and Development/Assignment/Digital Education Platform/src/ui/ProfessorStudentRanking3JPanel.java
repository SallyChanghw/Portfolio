/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui;

import Uni.Course.Course;
import Uni.Course.CourseHistory;
import Uni.Student.Student;
import Uni.Professor.Professor;
import Uni.Student.StudentHistory;
import Uni.Uni;
import java.awt.CardLayout;
import java.util.ArrayList;
import javax.swing.JPanel;
import javax.swing.RowSorter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import javax.swing.table.TableModel;
import javax.swing.SortOrder;
import java.awt.List;

/**
 *
 * @author josie
 */
public class ProfessorStudentRanking3JPanel extends javax.swing.JPanel {

    /**
     * Creates new form StudentRankingResultJPanel
     */
    private JPanel workArea;
    private Professor professor;
    private Student student;
    private Uni uni;
    private String semester;
    private String selectedCourse;

    ProfessorStudentRanking3JPanel(JPanel workArea, Professor professor,Uni uni,String semester,String courseID) {
        initComponents();
        this.workArea=workArea;
        this.professor=professor;
        this.uni=uni;
        this.semester=semester;
        this.selectedCourse=courseID;
        this.queryStudentRanking(courseID);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblStudentRanking = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblStudentRanking = new javax.swing.JTable();
        btnBack = new javax.swing.JButton();

        setBackground(new java.awt.Color(205, 237, 253));

        lblStudentRanking.setFont(new java.awt.Font("Helvetica Neue", 1, 30)); // NOI18N
        lblStudentRanking.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblStudentRanking.setText("STUDENT RANKING");

        tblStudentRanking.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "RANKING", "STUDENT ID", "STUDENT NAME", "SCORE"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblStudentRanking);
        if (tblStudentRanking.getColumnModel().getColumnCount() > 0) {
            tblStudentRanking.getColumnModel().getColumn(0).setResizable(false);
            tblStudentRanking.getColumnModel().getColumn(1).setResizable(false);
            tblStudentRanking.getColumnModel().getColumn(2).setResizable(false);
        }

        btnBack.setBackground(new java.awt.Color(237, 163, 90));
        btnBack.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        btnBack.setText("< BACK");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblStudentRanking, javax.swing.GroupLayout.DEFAULT_SIZE, 850, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(btnBack))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(141, 141, 141)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 560, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addComponent(btnBack)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblStudentRanking)
                .addGap(55, 55, 55)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 303, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(128, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        workArea.remove(this);
        CardLayout layout = (CardLayout) workArea.getLayout();
        layout.previous(workArea);
    }//GEN-LAST:event_btnBackActionPerformed
    
     private void queryStudentRanking(String selectedCourse) {
        
        //StudentHistory studentHistory = uni.getStudentHistory(); 
        ArrayList<Student> studentHistory = uni.studentHistory.getStudentHistory();
        ArrayList<Integer> ranking = new ArrayList<>();
        ArrayList<String> studentID = new ArrayList<>();
        ArrayList<String> studentName = new ArrayList<>();
        ArrayList<Integer> score = new ArrayList<>();
        String courseID;        
        Integer grade;
        DefaultTableModel model = (DefaultTableModel) tblStudentRanking.getModel();
        model.setRowCount(0);
        int rowCount=0;
        for(Student student : studentHistory){
            ArrayList<Course> registerCourses=student.getRegisterCourses();         

            for(Course c : registerCourses){
                courseID= c.getCourseID();  
                grade=c.getCourseScore();            
               
                if (c.getCourseID().equals(selectedCourse)){
                    ranking.add(rowCount+1);
                    studentID.add(student.getStudentID()) ;
                    studentName.add(student.getStudentName());
                    score.add(grade);
                    rowCount++;
                }
            }
        }
        
        //tblStudentRanking.setAutoCreateRowSorter(true);
        
//        TableRowSorter<TableModel> sorter = new TableRowSorter<TableModel>(tblStudentRanking.getModel());
//        tblStudentRanking.setRowSorter(sorter);
//        ArrayList <RowSorter.SortKey> sortKeys = new ArrayList<RowSorter.SortKey>();
//        sortKeys.add(new RowSorter.SortKey(3,SortOrder.DESCENDING));
//        sorter.setSortKeys(sortKeys);
        
        // Sorting by Bubble Sort method 
        int temp = 0;
        String strtemp;
        boolean flag = true;  // Initialize flag to true outside the loop

        for (int j = 0; j < rowCount; j++) {
            flag = false;  // Reset flag for each pass through the inner loop
            for (int i = 0; i < rowCount - 1 - j; i++) {
                if (score.get(i) < score.get(i + 1)) {  // Change the comparison to sort in ascending order
                    flag = true;
                    temp = score.get(i);
                    score.set(i, score.get(i + 1));
                    score.set(i + 1, temp);

                    strtemp = studentID.get(i);
                    studentID.set(i, studentID.get(i + 1));
                    studentID.set(i + 1, strtemp);

                    strtemp = studentName.get(i);
                    studentName.set(i, studentName.get(i + 1));
                    studentName.set(i + 1, strtemp);
                }
            }
        }

        // Display data on table
        for (int i = 0; i < rowCount; i++) {
            Object[] row = new Object[4];
            ranking.set(i, i + 1); // update ranking start from 1
            row[0] = ranking.get(i);
            row[1] = studentID.get(i);
            row[2] = studentName.get(i);
            row[3] = score.get(i);
            model.addRow(row);
        }
        
        
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblStudentRanking;
    private javax.swing.JTable tblStudentRanking;
    // End of variables declaration//GEN-END:variables
}
