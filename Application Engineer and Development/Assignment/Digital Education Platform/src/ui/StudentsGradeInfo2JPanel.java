/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui;

import Uni.Course.Course;
import Uni.Course.CourseHistory;
import Uni.Student.Student;
import Uni.Uni;
import java.awt.BorderLayout;
import java.awt.CardLayout;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.print.PageFormat;
import java.awt.print.Printable;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import java.util.ArrayList;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Ingrid
 */
public class StudentsGradeInfo2JPanel extends javax.swing.JPanel {

    private JPanel workArea;
    private Student student;
    private Uni uni;
    private String semester;
    /**
     * Creates new form StudentsSearchJPanel
     */


    StudentsGradeInfo2JPanel(JPanel workArea,Student student, Uni uni, String semester) {
        initComponents();
        this.workArea=workArea;
        this.student=student;
        this.uni=uni;
        this.semester=semester;
        this.queryStudentInfo(student.getStudentID(), semester);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblStudentInfo = new javax.swing.JTable();
        btnBack = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtGPA = new javax.swing.JTextField();
        btnShow = new javax.swing.JButton();
        btnPrintTranscript = new javax.swing.JButton();

        setBackground(new java.awt.Color(205, 237, 253));

        tblStudentInfo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "COURSE ID", "COURSE NAME", "GRADE", "CREDITS"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblStudentInfo);
        if (tblStudentInfo.getColumnModel().getColumnCount() > 0) {
            tblStudentInfo.getColumnModel().getColumn(0).setResizable(false);
            tblStudentInfo.getColumnModel().getColumn(1).setResizable(false);
            tblStudentInfo.getColumnModel().getColumn(2).setResizable(false);
            tblStudentInfo.getColumnModel().getColumn(3).setResizable(false);
        }

        btnBack.setBackground(new java.awt.Color(237, 163, 90));
        btnBack.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        btnBack.setText("< BACK");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Helvetica Neue", 1, 30)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("VIEW TRANSCRIPT");

        jLabel2.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        jLabel2.setText(" Weighted Score");

        txtGPA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtGPAActionPerformed(evt);
            }
        });

        btnShow.setBackground(new java.awt.Color(237, 163, 90));
        btnShow.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        btnShow.setText("SHOW IF CAN GRADUATE");
        btnShow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowActionPerformed(evt);
            }
        });

        btnPrintTranscript.setBackground(new java.awt.Color(237, 163, 90));
        btnPrintTranscript.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        btnPrintTranscript.setText("PRINT TRANSCRIPT");
        btnPrintTranscript.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrintTranscriptActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 850, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(btnBack)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtGPA, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(88, 88, 88)
                        .addComponent(btnShow, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnPrintTranscript))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 682, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(96, 96, 96))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(btnBack)
                .addGap(31, 31, 31)
                .addComponent(jLabel1)
                .addGap(53, 53, 53)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtGPA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnShow)
                    .addComponent(btnPrintTranscript))
                .addContainerGap(123, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        workArea.remove(this);
        CardLayout layout = (CardLayout) workArea.getLayout();
        layout.previous(workArea);
    }//GEN-LAST:event_btnBackActionPerformed

    private void txtGPAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtGPAActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtGPAActionPerformed

    private void btnShowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowActionPerformed
        // TODO add your handling code here:
        this.showIfGraduate(student.getStudentID());
    }//GEN-LAST:event_btnShowActionPerformed

    private void btnPrintTranscriptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrintTranscriptActionPerformed
        // TODO add your handling code here:
        
       btnPrintTranscript.addActionListener(new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            // Create a dialog to show the print preview
            JDialog printPreviewDialog = new JDialog((JFrame)null, "Print Transcript", true);
            printPreviewDialog.setLayout(new BorderLayout());

            // Create a JScrollPane to display the content you want to print (tblStudentInfo in this case)
            JScrollPane printScrollPane = new JScrollPane(tblStudentInfo);

            printPreviewDialog.add(printScrollPane, BorderLayout.CENTER);

            JButton printButton = new JButton("Print");
            printButton.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    // Code to actually print the content
                    PrinterJob job = PrinterJob.getPrinterJob();
                    job.setPrintable(new Printable() {
                        @Override
                        public int print(Graphics graphics, PageFormat pageFormat, int pageIndex) throws PrinterException {
                            if (pageIndex > 0) {
                                return Printable.NO_SUCH_PAGE;
                            }
                            Graphics2D g2d = (Graphics2D) graphics;
                            g2d.translate(pageFormat.getImageableX(), pageFormat.getImageableY());

                            // Instead of tblStudentInfo.print(g2d), create a copy of the table for printing
                            JTable printedTable = new JTable(tblStudentInfo.getModel());
                            printedTable.setSize(tblStudentInfo.getSize());
                            printedTable.print(g2d);

                            // Refresh the original table (tblStudentInfo)
                            tblStudentInfo.repaint();

                            return Printable.PAGE_EXISTS;
                        }
                    });
                    if (job.printDialog()) {
                        try {
                            job.print();
                        } catch (PrinterException ex) {
                            ex.printStackTrace();
                        }
                    }
                }
            });
            printPreviewDialog.add(printButton, BorderLayout.SOUTH);

            printPreviewDialog.setSize(600, 400);
            printPreviewDialog.setVisible(true);
        }
    });




    }//GEN-LAST:event_btnPrintTranscriptActionPerformed

    private void queryStudentInfo(String studentID, String semester) {
    ArrayList<Course> registerCourses=student.getRegisterCourses();
    String courseID;
    String courseName,sm;
    Integer grade,coursecredits;
    Integer rowcount=0, totalscore=0,creditcount=0;
    CourseHistory courseHistory = uni.getCourseHistory();
    DefaultTableModel model = (DefaultTableModel) tblStudentInfo.getModel();
    model.setRowCount(0);
   
    for(Course c : registerCourses){
        courseID= c.getCourseID();          
                  
        courseName=courseHistory.findCourse(courseID).getCourseName();
        grade=c.getCourseScore();
        coursecredits=courseHistory.findCourse(courseID).getCourseCredits();     
         
        sm=courseHistory.findCourse(courseID).getSemester();
        //txtGPA.setText(semester);
        if (sm.equals(semester)){
             
            Object[] row = new Object[4];
            row[0] = courseID;
            row[1] = courseName;
            row[2] = grade;
            row[3] = coursecredits;
             
            // Check if the grade is below 60 and set the text color accordingly
            if (grade < 60) {
                row[2] = "<html><font color='red'>" + grade + "</font></html>";
            }
             
            model.addRow(row); 
            totalscore = totalscore+(grade*coursecredits);
            creditcount = creditcount+coursecredits ;           
         }
          
    }
    if(creditcount!=0){
          txtGPA.setText(Float.toString(totalscore/creditcount));
     }
}
    
    private void showIfGraduate(String studentID) {
        ArrayList<Course> registerCourses = student.getRegisterCourses();
        String courseID;
        String courseName, sm;
        Integer grade, coursecredits;
        String[] semester = new String[2];
        Integer[] coursecount = new Integer[2];
        Integer[] subtotalscore = new Integer[2];
        Integer[] semestercreditcount = new Integer[2];
        Double[] gpa = new Double[2];
        int totalcourse;
        CourseHistory courseHistory = uni.getCourseHistory();
        semester[0] = "2023Spring";
        semester[1] = "2023Fall";
        coursecount[0] = 0;
        coursecount[1] = 0;
        subtotalscore[0] = 0;
        subtotalscore[1] = 0;
        gpa[0] = 0.0;
        gpa[1] = 0.0;
        semestercreditcount[0] = 0;
        semestercreditcount[1] = 0;
        totalcourse = 0;

        for (Course c : registerCourses) {
            courseID = c.getCourseID();
            courseName = courseHistory.findCourse(courseID).getCourseName();
            grade = c.getCourseScore();
            coursecredits = courseHistory.findCourse(courseID).getCourseCredits();
            sm = courseHistory.findCourse(courseID).getSemester();

            if (sm.equals(semester[0])) {
                subtotalscore[0] = subtotalscore[0] + (grade * coursecredits);
                if (grade >= 60) {
                    semestercreditcount[0] = semestercreditcount[0] + coursecredits;
                    coursecount[0]++;
                    totalcourse++;
                }
            } else if (sm.equals(semester[1])) {
                subtotalscore[1] = subtotalscore[1] + (grade * coursecredits);
                if (grade >= 60) {
                    coursecount[1]++;
                    semestercreditcount[1] = semestercreditcount[1] + coursecredits;
                    totalcourse++;
                }
            }
        }

        if (semestercreditcount[0] != 0) {
            gpa[0] = Double.valueOf(subtotalscore[0] / semestercreditcount[0]);
        }
        if (semestercreditcount[1] != 0) {
            gpa[1] = Double.valueOf(subtotalscore[1] / semestercreditcount[1]);
        }

        if (totalcourse >= 8) {
            JOptionPane.showMessageDialog(null, semester[0] + " pass course: " + coursecount[0] + "\n" +
                    semester[1] + " pass course: " + coursecount[1] + "\n" +
                    "Reach the graduate threshold. Total course: " + totalcourse + "\n");
        } else {
            JOptionPane.showMessageDialog(null, semester[0] + " pass course: " + coursecount[0] + "\n" +
                    semester[1] + " pass course: " + coursecount[1] + "\n" +
                    "Total course left to graduate: " + (8 - totalcourse) + "\n");
        }
}

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnPrintTranscript;
    private javax.swing.JButton btnShow;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblStudentInfo;
    private javax.swing.JTextField txtGPA;
    // End of variables declaration//GEN-END:variables
}
